"""
File where we will run the backtracking algorithm
"""
import sudoku_tools as sutils
import backtracking_functions as sb
import pprint
import time
import matplotlib.pyplot as plt



def test_level(difficulty: str, num_examples: int=10):
    print(f'Results for {difficulty} level')
    times = []
    percents = []
    boards = sutils.get_test_boards(difficulty=difficulty, num_examples=num_examples)
    for board in boards:
        solver = sb.Backtracking(board['board_input'])
        
        start_time = time.time()
        gen_sol = solver.solve() # the solution generated by the algorithm
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        gen_sol_str = sutils.array_to_formatted(gen_sol) 
        given_sol_str = board['solution']
        given_sol = sutils.formatted_to_array(given_sol_str) # turn into array
        
        # check if solutions match
        percent_correct, num_correct = sutils.check_solution(generated_sol=gen_sol, actual_sol=given_sol)
        print('Solution generated by Backtracking algorithm:')
        print(gen_sol_str)
        print('Solution given by dataset:')
        print(given_sol_str)
        print('Stats:')
        print(f'Number Correct: {num_correct},\n'
              f'Percent Correct: {percent_correct*100:.2f}%\n'
              f'Time Taken to Solve: {elapsed_time}')
        print()
        times.append(elapsed_time)
        percents.append(percent_correct)
        
    return times, percents
        

# def generate_viz(times: dict, percents: dict):
#     # --- Plot 1: Times Line Plot ---
#     plt.figure(figsize=(10, 5))
    
#     for difficulty, times in times.items():
#         x = list(range(1, len(times) + 1))
#         y = times
#         plt.plot(x, y, marker='o', label=difficulty)  # line + points
    
#     plt.title("Sudoku Solving Times Per Difficulty")
#     plt.xlabel("Example #")
#     plt.ylabel("Time (seconds)")
#     plt.legend(title="Difficulty")
#     plt.grid(True)
#     plt.tight_layout()
#     plt.show()
#     plt.savefig('Backtracking_Times.png')

#     # --- Plot 2: Average Accuracy Bar Chart ---
#     plt.figure(figsize=(6, 4))
    
#     levels = list(percents.keys())
#     # Multiply each percent list by 100 and get the average
#     averages = [
#         sum([p * 100 for p in percents[level]]) / len(percents[level])
#         for level in levels
#     ]
    
#     plt.bar(levels, averages, color='lightgreen')
#     plt.title("Average Accuracy by Difficulty")
#     plt.xlabel("Difficulty")
#     plt.ylabel("Accuracy (%)")
#     plt.ylim(0, 100)
#     plt.grid(axis='y')
#     plt.tight_layout()
#     plt.show()
#     plt.savefig('Backtracking_Percents.png')
#     return 



def main():
    num_examples = 3
    easy_times, easy_pcts = test_level(difficulty='easy', num_examples=num_examples)
    med_times, med_pcts = test_level(difficulty='medium', num_examples=num_examples)
    hard_times, hard_pcts = test_level(difficulty='hard', num_examples=num_examples)
    
    times = {'easy': easy_times,
             'medium': med_times,
             'hard': hard_times}
    percents = {'easy': easy_pcts,
                'medium': med_pcts,
                'hard': hard_pcts}
    
    # generate_viz(times, percents)
    
    pprint.pp(times)
    pprint.pp(percents)
    
    


if __name__ == "__main__":
    main()