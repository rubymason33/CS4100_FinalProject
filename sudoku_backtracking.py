"""
File where we will run the backtracking algorithm
"""
import sudoku_tools as sutils
import backtracking_functions as sb
import pprint
import time
import matplotlib.pyplot as plt



def test_level(difficulty: str, num_examples: int=10):
    print(f'Results for {difficulty} level')
    times = []
    percents = []
    boards = sutils.get_test_boards(difficulty=difficulty, num_examples=num_examples)
    for board in boards:
        solver = sb.Backtracking(board['board_input'])
        
        start_time = time.time()
        gen_sol = solver.solve() # the solution generated by the algorithm
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        gen_sol_str = sutils.array_to_formatted(gen_sol) 
        given_sol_str = board['solution']
        given_sol = sutils.formatted_to_array(given_sol_str) # turn into array
        
        # check if solutions match
        percent_correct, num_correct = sutils.check_solution(generated_sol=gen_sol, actual_sol=given_sol)
        print('Solution generated by Backtracking algorithm:')
        print(gen_sol_str)
        print('Solution given by dataset:')
        print(given_sol_str)
        print('Stats:')
        print(f'Number Correct: {num_correct},\n'
              f'Percent Correct: {percent_correct*100:.2f}%\n'
              f'Time Taken to Solve: {elapsed_time}')
        print()
        times.append(elapsed_time)
        percents.append(percent_correct)
        
    return times, percents

def collect_level_data(num_examples: int=10):
    easy_times, easy_pcts = test_level(difficulty='easy', num_examples=num_examples)
    med_times, med_pcts = test_level(difficulty='medium', num_examples=num_examples)
    hard_times, hard_pcts = test_level(difficulty='hard', num_examples=num_examples)
    
    times_dict = {'easy': easy_times,
             'medium': med_times,
             'hard': hard_times}
    percents_dict = {'easy': easy_pcts,
                'medium': med_pcts,
                'hard': hard_pcts}
    
    return times_dict, percents_dict
        
def generate_viz(times:dict, percents:dict):
    # transform the data for plotting
    difficulties = list(times.keys())
    num_examples = len(times['easy'])
    colors = {'easy':'#0c6f16', 'medium':'#efd515', 'hard':'#cf2b18'}
    all_times = [list(times[diff]) for diff in difficulties]
    mean_percent = [100*(sum(percents[diff])/num_examples) for diff in difficulties]

    # box plot for times
    plt.figure(figsize=(10,6))
    box = plt.boxplot(all_times, patch_artist=True, tick_labels=difficulties)

    # apply color
    for patch, diff in zip(box['boxes'], difficulties):
        patch.set_facecolor(colors[diff])

    # title
    plt.ylabel('Time (s)')
    plt.title(f'Time Distribution by Difficulty for {num_examples} Boards')
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig('TimePlot.png')
    plt.show()


    # bar plot for percents
    plt.figure(figsize=(10,6))
    plt.bar(difficulties, mean_percent, color=['#0c6f16', '#efd515','#cf2b18'], zorder=2)
    plt.ylabel('Percent')
    plt.title(f'Average Percent Correct by Difficulty for {num_examples} Boards')
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig('PercentPlot.png')
    plt.show()
    
    return


def main():
    times_dict, percent_dict = collect_level_data(num_examples=10)
    generate_viz(times=times_dict, percents=percent_dict)
    
if __name__ == "__main__":
    main()